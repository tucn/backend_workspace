name: Manual Security Scan

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Docker image tag to scan'
        required: true
        default: 'latest'
      scan_type:
        description: 'Type of security scan to perform'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - quick
          - vuln-only
      fail_on:
        description: 'Fail workflow on vulnerabilities of this severity or higher'
        required: true
        default: 'high'
        type: choice
        options:
          - critical
          - high
          - medium
          - low
          - none

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/gateway

jobs:
  security-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
      security-events: write
      actions: read

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Pull target image
      run: |
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.inputs.image_tag }}
        echo "Image pulled successfully: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.inputs.image_tag }}"

    - name: Generate SBOM with Syft
      uses: anchore/sbom-action@v0
      with:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.inputs.image_tag }}
        format: spdx-json
        output-file: sbom.spdx.json

    - name: Upload SBOM artifact
      uses: actions/upload-artifact@v4
      with:
        name: sbom-${{ github.event.inputs.image_tag }}
        path: sbom.spdx.json
        retention-days: 90

    - name: Run Grype vulnerability scan
      uses: anchore/grype-action@v0
      with:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.inputs.image_tag }}
        output: table
        format: json
        output-file: vulnerabilities.json
        fail-on: ${{ github.event.inputs.fail_on }}

    - name: Upload vulnerability report
      uses: actions/upload-artifact@v4
      with:
        name: vulnerabilities-${{ github.event.inputs.image_tag }}
        path: vulnerabilities.json
        retention-days: 90

    - name: Generate detailed security report
      run: |
        echo "## 🔍 Security Scan Report" > security-report.md
        echo "" >> security-report.md
        echo "**Image:** \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.inputs.image_tag }}\`" >> security-report.md
        echo "**Scan Type:** ${{ github.event.inputs.scan_type }}" >> security-report.md
        echo "**Scan Date:** $(date)" >> security-report.md
        echo "**Triggered by:** ${{ github.actor }}" >> security-report.md
        echo "" >> security-report.md
        
        if [ -f "vulnerabilities.json" ]; then
          echo "### 📊 Vulnerability Summary" >> security-report.md
          echo "" >> security-report.md
          
          # Parse vulnerability data with jq
          CRITICAL=$(jq '.matches | map(select(.vulnerability.severity == "Critical")) | length' vulnerabilities.json 2>/dev/null || echo "0")
          HIGH=$(jq '.matches | map(select(.vulnerability.severity == "High")) | length' vulnerabilities.json 2>/dev/null || echo "0")
          MEDIUM=$(jq '.matches | map(select(.vulnerability.severity == "Medium")) | length' vulnerabilities.json 2>/dev/null || echo "0")
          LOW=$(jq '.matches | map(select(.vulnerability.severity == "Low")) | length' vulnerabilities.json 2>/dev/null || echo "0")
          TOTAL=$(jq '.matches | length' vulnerabilities.json 2>/dev/null || echo "0")
          
          echo "| Severity | Count |" >> security-report.md
          echo "|----------|-------|" >> security-report.md
          echo "| 🔴 Critical | $CRITICAL |" >> security-report.md
          echo "| 🟠 High | $HIGH |" >> security-report.md
          echo "| 🟡 Medium | $MEDIUM |" >> security-report.md
          echo "| 🟢 Low | $LOW |" >> security-report.md
          echo "| **Total** | **$TOTAL** |" >> security-report.md
          echo "" >> security-report.md
          
          if [ "$CRITICAL" -gt 0 ] || [ "$HIGH" -gt 0 ]; then
            echo "⚠️ **High Priority Issues Detected**" >> security-report.md
            echo "" >> security-report.md
            echo "The following critical and high severity vulnerabilities require immediate attention:" >> security-report.md
            echo "" >> security-report.md
            
            # List critical and high vulnerabilities
            jq -r '.matches[] | select(.vulnerability.severity == "Critical" or .vulnerability.severity == "High") | "- **" + .vulnerability.severity + ":** " + .vulnerability.id + " in " + .artifact.name + " (" + .vulnerability.description + ")"' vulnerabilities.json >> security-report.md 2>/dev/null || echo "- Unable to parse vulnerability details" >> security-report.md
          fi
          
          echo "" >> security-report.md
          echo "### 📋 Detailed Findings" >> security-report.md
          echo "" >> security-report.md
          echo "For detailed vulnerability information, download the JSON report artifact." >> security-report.md
        else
          echo "❌ **Scan Failed**" >> security-report.md
          echo "" >> security-report.md
          echo "No vulnerability report was generated. Please check the workflow logs for errors." >> security-report.md
        fi
        
        echo "" >> security-report.md
        echo "---" >> security-report.md
        echo "*Report generated by GitHub Actions security workflow*" >> security-report.md

    - name: Upload security report
      uses: actions/upload-artifact@v4
      with:
        name: security-report-${{ github.event.inputs.image_tag }}
        path: security-report.md
        retention-days: 90

    - name: Comment on issue/PR if triggered from one
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.scan_type == 'full'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          try {
            const reportContent = fs.readFileSync('security-report.md', 'utf8');
            
            // Try to find related issue or PR
            const context = github.context;
            let targetNumber = null;
            
            // Check if we're in a PR context
            if (context.payload.pull_request) {
              targetNumber = context.payload.pull_request.number;
            } else if (context.payload.issue) {
              targetNumber = context.payload.issue.number;
            }
            
            if (targetNumber) {
              github.rest.issues.createComment({
                issue_number: targetNumber,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: reportContent
              });
              console.log(`Comment added to issue/PR #${targetNumber}`);
            } else {
              console.log('No related issue/PR found for commenting');
            }
          } catch (error) {
            console.error('Error adding comment:', error);
          }

    - name: Create security summary
      run: |
        echo "## 🔍 Manual Security Scan Completed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Image:** \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.inputs.image_tag }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Scan Type:** ${{ github.event.inputs.scan_type }}" >> $GITHUB_STEP_SUMMARY
        echo "**Triggered by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "vulnerabilities.json" ]; then
          echo "✅ **Scan completed successfully**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📋 **Artifacts generated:**" >> $GITHUB_STEP_SUMMARY
          echo "- SBOM (SPDX format)" >> $GITHUB_STEP_SUMMARY
          echo "- Vulnerability report (JSON)" >> $GITHUB_STEP_SUMMARY
          echo "- Security summary (Markdown)" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Scan failed**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Please check the workflow logs for error details." >> $GITHUB_STEP_SUMMARY
        fi
